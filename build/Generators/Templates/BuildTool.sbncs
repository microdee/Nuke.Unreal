{{- func build_argument(arg, config_type) }}
    
    {{~ arg.docs }}
    public virtual {{ config_type.final }} {{ arg.config_name }}({{ arg.parameters_renderer }})
    {
        AppendArgument({{ arg.command_line_renderer }});
        return ({{ config_type.final }}) this;
    }
{{ end -}}
{{- func build_tool(tool) }}
{{~ tool.docs }}
public {{ tool.class_keywords }} class {{ tool.config_type.base }} : ToolConfig
{
    public override string Name => "{{ tool.config_name }}";

    {{- for arg in tool.arguments }}
    {{ build_argument arg tool.config_type }}
    {{- end -}}

    {{- for subtool in tool.subtools }}
    {{ build_tool subtool }}
    protected readonly {{ subtool.config_type.final }} {{ subtool.config_name }}Storage = new();
    {{- end }}

    private ToolConfig[] _configs = null;
    protected override ToolConfig[] Configs => _configs ??= new ToolConfig[]
    {
        {{~ for subtool in tool.subtools ~}}
        {{ subtool.config_name }}Storage,
        {{ end ~}}
    };
    
    {{- for subtool in tool.subtools }}
    {{~ subtool.docs }}
    public {{ tool.config_type.final }} {{ subtool.config_name }}(Action<{{ subtool.config_type.final }}> configurator = null)
    {
        configurator?.Invoke({{ subtool.config_name }}Storage);
        AppendSubtool({{ subtool.config_name }}Storage);
        return ({{ tool.config_type.final }}) this;
    }
    {{- end }}

    public override string Gather()
    {
        {{ if tool.cli_name != null && tool.cli_name != "" -}}
        Arguments.Insert(0, "{{ tool.cli_name }}");
        {{- end -}}
        return base.Gather();
    }
}
{{ end -}}