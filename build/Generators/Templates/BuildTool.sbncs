{{- func build_argument(arg, config_type) }}
    {{~ arg.docs }}
    public virtual {{ config_type.final }} {{ arg.config_name }}({{ arg.parameters_renderer }})
    {
        if ({{ arg.condition }})
        {
            {{- if arg.is_collection_multiple_args }}
                if (values != null)
                    foreach (var val in values)
                    {
                        AppendArgument(new UnrealToolArgument(
                            "{{ arg.cli_name }}",
                            Value: val.ToString(),
                            Setter: '{{ arg.value_setter == "" ? "=" : arg.value_setter }}',
                            Meta: new(
                                Compatibility: {{ arg.compatibility_render }},
                                AllowMultiple: true
                            )
                        ));
                    }
            {{- else }}
                AppendArgument(new UnrealToolArgument(
                    "{{ arg.cli_name }}",
                    Value: {{ arg.command_line_renderer }},
                    Setter: '{{ arg.value_setter == "" ? "=" : arg.value_setter }}',
                    Meta: new(
                        Compatibility: {{ arg.compatibility_render }},
                        AllowMultiple: {{ arg.is_collection }}
                    )
                ));
            {{- end }}
        }
        return ({{ config_type.final }}) this;
    }
{{ end -}}
{{- func build_tool(tool) }}
{{~ tool.docs }}
public {{ tool.class_keywords }} class {{ tool.config_type.base }} : ToolConfig
{
    public override string Name => "{{ tool.config_name }}";
    public override string CliName => "{{ tool.cli_name }}";
    public override UnrealCompatibility Compatibility => {{ tool.compatibility_render }};

    {{- for arg in tool.arguments }}
    {{ build_argument arg tool.config_type }}
    {{- end -}}

    {{- for subtool in tool.subtools }}
    {{ build_tool subtool }}
    protected readonly {{ subtool.config_type.final }} {{ subtool.config_name }}Storage = new();
    {{- end }}

    private ToolConfig[] _configs = null;
    protected override ToolConfig[] Configs => _configs ??= new ToolConfig[]
    {
        {{~ for subtool in tool.subtools ~}}
        {{ subtool.config_name }}Storage,
        {{ end ~}}
    };
    
    {{- for subtool in tool.subtools }}
    {{~ subtool.docs }}
    public {{ tool.config_type.final }} {{ subtool.config_name }}(Action<{{ subtool.config_type.final }}> configurator)
    {
        configurator?.Invoke({{ subtool.config_name }}Storage);
        AppendSubtool({{ subtool.config_name }}Storage);
        return ({{ tool.config_type.final }}) this;
    }
    {{- end }}
}
{{ end -}}