{{- cap_name = spec.name | string.capitalize -}}
// {{ copyright }}

using Nuke.Common;
using Nuke.Common.IO;
using Nuke.Common.Tooling;
using Nuke.Cola;
using Nuke.Cola.Tooling;
using Nuke.Cola.BuildPlugins;
using Nuke.Unreal;
using Serilog;
using System;

[ImplicitBuildInterface]
[ParameterPrefix("{{ spec.name }}")]
public interface IUse{{ cap_name }} : INukeBuild
{
    AbsolutePath {{ cap_name }}InputDir => this.ScriptFolder() / "{{ spec.name }}";

    string[] {{ cap_name }}Configs => [ "Release", "Debug" ];

    Target Prepare{{ cap_name }} => _ => _
        .DependentFor<UnrealBuild>(b => b.Prepare)
        .Executes(() =>
        {
            var cmake = ToolCola.Use("cmake").Get();
            var platform = ((UnrealBuild)this).Platform;

            foreach(var config in {{ cap_name }}Configs)
            {
                var architecture = "x64";
                var cmakeOutput = this.ScriptFolder() / "CMake" / config;
                cmakeOutput.CreateOrCleanDirectory();

                Log.Information("Generating {0} {{ spec.name }} libraries for {1} ({2})", config, platform, architecture);

                var args =
                    $"""
                    -G "Visual Studio 17 2022" -A {architecture}
                    -DCMAKE_BUILD_TYPE={config}
                    -DCMAKE_INSTALL_PREFIX="{cmakeOutput}"
                    "{ {{ cap_name }}InputDir }"
                    """
                    .AsSingleLine();
                
                cmake(arguments: $"{args:nq}", workingDirectory: cmakeOutput);

                Log.Information("Building {0} {{ spec.name }} libraries for {1} ({2})", config, platform, architecture);
                cmake(
                    arguments: $"--build . --target INSTALL --config {config}",
                    workingDirectory: cmakeOutput
                );

                (cmakeOutput / "include").Copy(this.ScriptFolder() / "Include", ExistsPolicy.MergeAndOverwrite);
                (cmakeOutput / "lib").Copy(this.ScriptFolder() / "Lib" / platform / config, ExistsPolicy.MergeAndOverwrite);
            }
        });
}