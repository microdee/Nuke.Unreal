{{- cap_name = spec.name | string.capitalize -}}
// {{ copyright }}

using UnrealBuildTool;

public partial class {{ cap_name }}{{ suffix.us }} : ModuleRules
{
	bool IsDebug;
	string LibraryConfig;
	string LibraryPlatform;

	public {{ cap_name }}{{ suffix.us }}(ReadOnlyTargetRules target) : base(target)
	{
		// This is the main module file for using {{ spec.name }} in Unreal Engine.
		// Because each individual platform can carry different requirements for {{ spec.name }},
		// includes and lib imports are expressed in platform specific partial classes. These are
		// auto generated when the library is prepared on/for a specific platform.

		Type = ModuleType.External;
		IsDebug = target.Configuration == UnrealTargetConfiguration.Debug && target.bDebugBuildsActuallyUseDebugCRT;
		LibraryConfig = IsDebug ? "Debug" : "Release";
		LibraryPlatform = target.Platform.ToString();

		// Write user defined setup here

		// Optional platform specific library setup:
		{{- for plat in supported_platforms }}
		if (target.Platform == UnrealTargetPlatform.{{ plat }})
			SetupLibrary_{{ plat }}(target);
		{{- end -}}
	}

	{{- for plat in supported_platforms }}
	partial void SetupLibrary_{{ plat }}(ReadOnlyTargetRules target);
	{{- end -}}
}